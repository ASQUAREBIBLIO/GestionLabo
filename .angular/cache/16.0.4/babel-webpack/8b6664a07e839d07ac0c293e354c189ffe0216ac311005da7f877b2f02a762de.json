{"ast":null,"code":"import { RouterModule } from '@angular/router';\nimport { AddexpressionComponent } from './addexpression/addexpression.component';\nimport { EditexpressionComponent } from './editexpression/editexpression.component';\nimport { ListexpressionComponent } from './listexpression/listexpression.component';\nimport { MembreGuardService } from 'src/app/services/membreGuard/membre-guard.service';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/router\";\nconst routes = [{\n  path: \"addexpression\",\n  component: AddexpressionComponent,\n  canActivate: [MembreGuardService]\n}, {\n  path: \"editexpression\",\n  component: EditexpressionComponent,\n  canActivate: [MembreGuardService]\n}, {\n  path: \"listexpression\",\n  component: ListexpressionComponent,\n  canActivate: [MembreGuardService]\n}, {\n  path: 'expressionsbesoin/edit/:id',\n  component: EditexpressionComponent,\n  canActivate: [MembreGuardService]\n}];\nclass ExpressionsbesoinRoutingModule {}\nExpressionsbesoinRoutingModule.ɵfac = function ExpressionsbesoinRoutingModule_Factory(t) {\n  return new (t || ExpressionsbesoinRoutingModule)();\n};\nExpressionsbesoinRoutingModule.ɵmod = /*@__PURE__*/i0.ɵɵdefineNgModule({\n  type: ExpressionsbesoinRoutingModule\n});\nExpressionsbesoinRoutingModule.ɵinj = /*@__PURE__*/i0.ɵɵdefineInjector({\n  imports: [RouterModule.forChild(routes), RouterModule]\n});\nexport { ExpressionsbesoinRoutingModule };\n(function () {\n  (typeof ngJitMode === \"undefined\" || ngJitMode) && i0.ɵɵsetNgModuleScope(ExpressionsbesoinRoutingModule, {\n    imports: [i1.RouterModule],\n    exports: [RouterModule]\n  });\n})();","map":{"version":3,"names":["RouterModule","AddexpressionComponent","EditexpressionComponent","ListexpressionComponent","MembreGuardService","routes","path","component","canActivate","ExpressionsbesoinRoutingModule","forChild","imports","i1","exports"],"sources":["C:\\Users\\Asus ROG\\Documents\\GitHub\\GestionLabo\\src\\app\\components\\admins\\expressionsbesoin\\expressionsbesoin-routing.module.ts"],"sourcesContent":["import { NgModule } from '@angular/core';\r\nimport { RouterModule, Routes } from '@angular/router';\r\nimport { AddexpressionComponent } from './addexpression/addexpression.component';\r\nimport { EditexpressionComponent } from './editexpression/editexpression.component';\r\nimport { ListexpressionComponent } from './listexpression/listexpression.component';\r\nimport { MembreGuardService } from 'src/app/services/membreGuard/membre-guard.service';\r\n\r\nconst routes: Routes = [\r\n  {\r\n    path: \"addexpression\",\r\n    component: AddexpressionComponent, canActivate: [MembreGuardService]\r\n  },\r\n  {\r\n    path: \"editexpression\",\r\n    component: EditexpressionComponent, canActivate: [MembreGuardService]\r\n  },\r\n  {\r\n    path: \"listexpression\",\r\n    component: ListexpressionComponent, canActivate: [MembreGuardService]\r\n  },\r\n  {\r\n    path: 'expressionsbesoin/edit/:id', \r\n    component: EditexpressionComponent , canActivate: [MembreGuardService]\r\n\r\n  },\r\n];\r\n\r\n@NgModule({\r\n  imports: [RouterModule.forChild(routes)],\r\n  exports: [RouterModule]\r\n})\r\nexport class ExpressionsbesoinRoutingModule { }\r\n"],"mappings":"AACA,SAASA,YAAY,QAAgB,iBAAiB;AACtD,SAASC,sBAAsB,QAAQ,yCAAyC;AAChF,SAASC,uBAAuB,QAAQ,2CAA2C;AACnF,SAASC,uBAAuB,QAAQ,2CAA2C;AACnF,SAASC,kBAAkB,QAAQ,mDAAmD;;;AAEtF,MAAMC,MAAM,GAAW,CACrB;EACEC,IAAI,EAAE,eAAe;EACrBC,SAAS,EAAEN,sBAAsB;EAAEO,WAAW,EAAE,CAACJ,kBAAkB;CACpE,EACD;EACEE,IAAI,EAAE,gBAAgB;EACtBC,SAAS,EAAEL,uBAAuB;EAAEM,WAAW,EAAE,CAACJ,kBAAkB;CACrE,EACD;EACEE,IAAI,EAAE,gBAAgB;EACtBC,SAAS,EAAEJ,uBAAuB;EAAEK,WAAW,EAAE,CAACJ,kBAAkB;CACrE,EACD;EACEE,IAAI,EAAE,4BAA4B;EAClCC,SAAS,EAAEL,uBAAuB;EAAGM,WAAW,EAAE,CAACJ,kBAAkB;CAEtE,CACF;AAED,MAIaK,8BAA8B;AAA9BA,8BAA8B,C;mBAA9BA,8BAA8B;AAAA;AAA9BA,8BAA8B,C;QAA9BA;AAA8B;AAA9BA,8BAA8B,C;YAH/BT,YAAY,CAACU,QAAQ,CAACL,MAAM,CAAC,EAC7BL,YAAY;AAAA;SAEXS,8BAA8B;;2EAA9BA,8BAA8B;IAAAE,OAAA,GAAAC,EAAA,CAAAZ,YAAA;IAAAa,OAAA,GAF/Bb,YAAY;EAAA;AAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}