{"ast":null,"code":"import * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nclass AuthService {\n  constructor(http) {\n    this.http = http;\n    this.tokenKey = 'authId';\n  }\n  login(email, password) {\n    const loginData = {\n      email,\n      password\n    };\n    return this.http.post('http://localhost:8082/login', loginData);\n  }\n  handleLoginResponse(response) {\n    this.role = response.role;\n    localStorage.setItem(this.tokenKey, response.token);\n  }\n  logout() {\n    //free the local storage\n    localStorage.removeItem(this.tokenKey);\n  }\n  getToken() {\n    // Retrieve the token from local storage\n    return localStorage.getItem(this.tokenKey);\n  }\n  isLoggedIn() {\n    if (this.getToken()) {\n      return true;\n    } else return false;\n  }\n  isAdmin() {\n    return this.role === \"ADMIN\";\n  }\n  isMember() {\n    return this.role === \"MEMBRE\";\n  }\n  isDirector() {\n    return this.role === \"DIRECTOR\";\n  }\n  // Method to retrieve the ID of the current member\n  getCurrentMemberId() {\n    // Retrieve the ID from the current member object\n    return this.currentMember.id;\n  }\n}\nAuthService.ɵfac = function AuthService_Factory(t) {\n  return new (t || AuthService)(i0.ɵɵinject(i1.HttpClient));\n};\nAuthService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: AuthService,\n  factory: AuthService.ɵfac,\n  providedIn: 'root'\n});\nexport { AuthService };","map":{"version":3,"names":["AuthService","constructor","http","tokenKey","login","email","password","loginData","post","handleLoginResponse","response","role","localStorage","setItem","token","logout","removeItem","getToken","getItem","isLoggedIn","isAdmin","isMember","isDirector","getCurrentMemberId","currentMember","id","i0","ɵɵinject","i1","HttpClient","factory","ɵfac","providedIn"],"sources":["C:\\Users\\ch\\Documents\\GitHub\\GestionLabo\\src\\app\\services\\Auth\\auth.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\r\nimport { HttpClient } from '@angular/common/http';\r\nimport { Observable } from 'rxjs';\r\nimport { IMembre } from 'src/app/models/IMembre';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class AuthService {\r\n  private role!: string | null;\r\n  private id!: number;\r\n  private tokenKey: string = 'authId';\r\n\r\n  constructor(private http: HttpClient) {}\r\n\r\n  login(email: string, password: string): Observable<any> {\r\n    const loginData = { email, password };\r\n\r\n    return this.http.post('http://localhost:8082/login', loginData);\r\n  }\r\n\r\n  handleLoginResponse(response: any) {\r\n    this.role = response.role;\r\n    localStorage.setItem(this.tokenKey, response.token);\r\n  }\r\n\r\n  logout() {\r\n    //free the local storage\r\n    localStorage.removeItem(this.tokenKey);\r\n  }\r\n\r\n  getToken(): string | null {\r\n    // Retrieve the token from local storage\r\n    return localStorage.getItem(this.tokenKey);\r\n  }\r\n\r\n  isLoggedIn(): boolean {\r\n    if(this.getToken()){\r\n      return true;\r\n    } else return false;\r\n  }\r\n\r\n  isAdmin() {\r\n    return this.role === \"ADMIN\";\r\n  }\r\n\r\n  isMember() {\r\n    return this.role === \"MEMBRE\";\r\n  }\r\n\r\n  isDirector(){\r\n    return this.role === \"DIRECTOR\";\r\n  }\r\n\r\n  private currentMember!: IMembre;\r\n\r\n  // Method to retrieve the ID of the current member\r\n  getCurrentMemberId(): number | undefined {\r\n    // Retrieve the ID from the current member object\r\n    return this.currentMember.id;\r\n  }\r\n}\r\n"],"mappings":";;AAKA,MAGaA,WAAW;EAKtBC,YAAoBC,IAAgB;IAAhB,KAAAA,IAAI,GAAJA,IAAI;IAFhB,KAAAC,QAAQ,GAAW,QAAQ;EAEI;EAEvCC,KAAKA,CAACC,KAAa,EAAEC,QAAgB;IACnC,MAAMC,SAAS,GAAG;MAAEF,KAAK;MAAEC;IAAQ,CAAE;IAErC,OAAO,IAAI,CAACJ,IAAI,CAACM,IAAI,CAAC,6BAA6B,EAAED,SAAS,CAAC;EACjE;EAEAE,mBAAmBA,CAACC,QAAa;IAC/B,IAAI,CAACC,IAAI,GAAGD,QAAQ,CAACC,IAAI;IACzBC,YAAY,CAACC,OAAO,CAAC,IAAI,CAACV,QAAQ,EAAEO,QAAQ,CAACI,KAAK,CAAC;EACrD;EAEAC,MAAMA,CAAA;IACJ;IACAH,YAAY,CAACI,UAAU,CAAC,IAAI,CAACb,QAAQ,CAAC;EACxC;EAEAc,QAAQA,CAAA;IACN;IACA,OAAOL,YAAY,CAACM,OAAO,CAAC,IAAI,CAACf,QAAQ,CAAC;EAC5C;EAEAgB,UAAUA,CAAA;IACR,IAAG,IAAI,CAACF,QAAQ,EAAE,EAAC;MACjB,OAAO,IAAI;KACZ,MAAM,OAAO,KAAK;EACrB;EAEAG,OAAOA,CAAA;IACL,OAAO,IAAI,CAACT,IAAI,KAAK,OAAO;EAC9B;EAEAU,QAAQA,CAAA;IACN,OAAO,IAAI,CAACV,IAAI,KAAK,QAAQ;EAC/B;EAEAW,UAAUA,CAAA;IACR,OAAO,IAAI,CAACX,IAAI,KAAK,UAAU;EACjC;EAIA;EACAY,kBAAkBA,CAAA;IAChB;IACA,OAAO,IAAI,CAACC,aAAa,CAACC,EAAE;EAC9B;;AApDWzB,WAAW,C;mBAAXA,WAAW,EAAA0B,EAAA,CAAAC,QAAA,CAAAC,EAAA,CAAAC,UAAA;AAAA;AAAX7B,WAAW,C;SAAXA,WAAW;EAAA8B,OAAA,EAAX9B,WAAW,CAAA+B,IAAA;EAAAC,UAAA,EAFV;AAAM;SAEPhC,WAAW"},"metadata":{},"sourceType":"module","externalDependencies":[]}