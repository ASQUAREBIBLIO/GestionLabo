{"ast":null,"code":"import * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nclass AuthService {\n  constructor(http) {\n    this.http = http;\n    this.loggedIn = false;\n  }\n  login(email, password) {\n    const loginData = {\n      email,\n      password\n    };\n    return this.http.post('http://localhost:8082/login', loginData).subscribe(response => {\n      this.role = response.role;\n      this.loggedIn = true;\n    }, error => {\n      // Handle login error\n    });\n  }\n  logout() {\n    this.role = '';\n    this.loggedIn = false;\n  }\n  isLoggedIn() {\n    return this.loggedIn;\n  }\n  isAdmin() {\n    return this.role === \"ADMIN\";\n  }\n  isMember() {\n    return this.role === \"MEMBRE\";\n  }\n}\nAuthService.ɵfac = function AuthService_Factory(t) {\n  return new (t || AuthService)(i0.ɵɵinject(i1.HttpClient));\n};\nAuthService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: AuthService,\n  factory: AuthService.ɵfac,\n  providedIn: 'root'\n});\nexport { AuthService };","map":{"version":3,"names":["AuthService","constructor","http","loggedIn","login","email","password","loginData","post","subscribe","response","role","error","logout","isLoggedIn","isAdmin","isMember","i0","ɵɵinject","i1","HttpClient","factory","ɵfac","providedIn"],"sources":["C:\\Users\\ch\\Documents\\GitHub\\GestionLabo\\src\\app\\services\\Auth\\auth.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\r\nimport { HttpClient } from '@angular/common/http';\r\nimport { Observable } from 'rxjs';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class AuthService {\r\n  private loggedIn = false;\r\n  private role!: string | null;\r\n\r\n  constructor(private http: HttpClient) {}\r\n\r\n  login(email: string, password: string) {\r\n    const loginData = { email, password };\r\n\r\n    return this.http.post('http://localhost:8082/login', loginData).subscribe(\r\n      (response: any) => {\r\n        this.role = response.role;\r\n        this.loggedIn = true;\r\n      },\r\n      (error) => {\r\n        // Handle login error\r\n      }\r\n    );\r\n  }\r\n\r\n  logout() {\r\n    this.role = '';\r\n    this.loggedIn = false;\r\n  }\r\n\r\n  isLoggedIn() {\r\n    return this.loggedIn;\r\n  }\r\n\r\n  isAdmin() {\r\n    return this.role === \"ADMIN\";\r\n  }\r\n\r\n  isMember() {\r\n    return this.role === \"MEMBRE\";\r\n  }\r\n}\r\n"],"mappings":";;AAIA,MAGaA,WAAW;EAItBC,YAAoBC,IAAgB;IAAhB,KAAAA,IAAI,GAAJA,IAAI;IAHhB,KAAAC,QAAQ,GAAG,KAAK;EAGe;EAEvCC,KAAKA,CAACC,KAAa,EAAEC,QAAgB;IACnC,MAAMC,SAAS,GAAG;MAAEF,KAAK;MAAEC;IAAQ,CAAE;IAErC,OAAO,IAAI,CAACJ,IAAI,CAACM,IAAI,CAAC,6BAA6B,EAAED,SAAS,CAAC,CAACE,SAAS,CACtEC,QAAa,IAAI;MAChB,IAAI,CAACC,IAAI,GAAGD,QAAQ,CAACC,IAAI;MACzB,IAAI,CAACR,QAAQ,GAAG,IAAI;IACtB,CAAC,EACAS,KAAK,IAAI;MACR;IAAA,CACD,CACF;EACH;EAEAC,MAAMA,CAAA;IACJ,IAAI,CAACF,IAAI,GAAG,EAAE;IACd,IAAI,CAACR,QAAQ,GAAG,KAAK;EACvB;EAEAW,UAAUA,CAAA;IACR,OAAO,IAAI,CAACX,QAAQ;EACtB;EAEAY,OAAOA,CAAA;IACL,OAAO,IAAI,CAACJ,IAAI,KAAK,OAAO;EAC9B;EAEAK,QAAQA,CAAA;IACN,OAAO,IAAI,CAACL,IAAI,KAAK,QAAQ;EAC/B;;AAnCWX,WAAW,C;mBAAXA,WAAW,EAAAiB,EAAA,CAAAC,QAAA,CAAAC,EAAA,CAAAC,UAAA;AAAA;AAAXpB,WAAW,C;SAAXA,WAAW;EAAAqB,OAAA,EAAXrB,WAAW,CAAAsB,IAAA;EAAAC,UAAA,EAFV;AAAM;SAEPvB,WAAW"},"metadata":{},"sourceType":"module","externalDependencies":[]}